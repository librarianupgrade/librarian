package com.strange.brokenapi.analysis.jdt.filter.error;

import cn.hutool.core.lang.Pair;
import cn.hutool.core.util.StrUtil;
import com.strange.common.utils.ClassUtil;
import com.strange.common.utils.JDTUtil;
import org.eclipse.jdt.core.compiler.IProblem;

import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class SetterFilter extends BaseErrorFilter {
    private static final Set<String> SETTER_ANNOTATION_SET = Set.of("lombok.Setter", "lombok.Data", "lombok.*");

    private final Map<String, File> javaCodeFileMap;

    public SetterFilter(Map<String, File> javaCodeFileMap) {
        super(javaCodeFileMap);
        this.javaCodeFileMap = javaCodeFileMap;
    }

    @Override
    public boolean filter(File sourceCodeFile, IProblem problem) {
        String[] arguments = problem.getArguments();

        // Remove the setter methods generated by @Data and @Setter
        if (arguments.length == 3 && arguments[1].startsWith("set")) {
            String className = ClassUtil.removeGenericType(arguments[0]);
            if (javaCodeFileMap.containsKey(className)) {
                File file = javaCodeFileMap.get(className);

                if (!validateSetterProblem(file, arguments[1])) {
                    return false;
                }
            } else {
                Pair<String, String> classPair = isInnerClass(className);
                if (classPair != null) {
                    // if is inner class
                    File tempFile = writeInnerClassToTempFile(classPair);
                    if (!validateSetterProblem(tempFile, arguments[1])) {
                        return false;
                    }
                } else {
                    // if is generic type class
                    Map<String, List<String>> genericBoundMapping = JDTUtil.getGenericBoundMapping(sourceCodeFile);
                    if (genericBoundMapping.containsKey(className)) {
                        for (String boundClassName : genericBoundMapping.get(className)) {
                            if (javaCodeFileMap.containsKey(boundClassName)) {
                                File file = javaCodeFileMap.get(boundClassName);

                                if (!validateSetterProblem(file, arguments[1])) {
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }

        // Remove the getter methods used in lambda function
        if (problem.getID() == PARAMETER_MISMATCH) {
            List<String> paramTypeList = ClassUtil.parseParamTypeList(arguments[3]);
            for (String paramType : paramTypeList) {
                paramType = paramType.strip();
                List<String> split = StrUtil.split(paramType, "::");
                if (split.size() == 2 && split.get(1).startsWith("set")) {
                    return false;
                }
            }
        }

        // Remove the Abstracted Not Implement cased by getter methods generated by @Data and @Setter
        if (problem.getID() == ABSTRACTED_METHOD_NOT_IMPLEMENT_ERROR && (arguments[0].startsWith("set"))) {
            String className = ClassUtil.removeGenericType(arguments[3]);
            if (javaCodeFileMap.containsKey(className)) {
                File file = javaCodeFileMap.get(className);

                if (!validateMissedSetterMethod(file, arguments[0])) {
                    return false;
                }
            }
        }

        return true;
    }

    private boolean validateMissedSetterMethod(File sourceCodeFile, String missedMethodName) {
        return validateMissedMethod(sourceCodeFile, missedMethodName, SETTER_ANNOTATION_SET);
    }

    private boolean validateSetterProblem(File sourceCodeFile, String missedMethodName) {
        if (!validateMissedSetterMethod(sourceCodeFile, missedMethodName)) return false;

        List<String> superClassList = JDTUtil.getSuperClassAndInterfaces(sourceCodeFile);
        for (String superClassName : superClassList) {
            superClassName = ClassUtil.removeGenericType(superClassName);
            if (javaCodeFileMap.containsKey(superClassName)) {
                if (!validateSetterProblem(javaCodeFileMap.get(superClassName), missedMethodName)) {
                    return false;
                }
            }
        }

        return true;
    }
}
