package com.strange.brokenapi.analysis.jdt.filter.error;

import cn.hutool.core.lang.Pair;
import com.strange.common.utils.ClassUtil;
import com.strange.common.utils.JDTUtil;
import org.eclipse.jdt.core.compiler.IProblem;

import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class ConstructorFilter extends BaseErrorFilter {
    private static final Set<String> CONSTRUCTOR_ANNOTATION_SET = Set.of("lombok.NoArgsConstructor", "lombok.AllArgsConstructor", "lombok.RequiredArgsConstructor", "lombok.Data", "lombok.Value", "lombok.*");

    private final Map<String, File> javaCodeFileMap;

    public ConstructorFilter(Map<String, File> javaCodeFileMap) {
        super(javaCodeFileMap);
        this.javaCodeFileMap = javaCodeFileMap;
    }

    @Override
    public boolean filter(File sourceCodeFile, IProblem problem) {
        String[] arguments = problem.getArguments();

        // Remove the constructor generated by @NoArgsConstructor and @AllArgsConstructor
        if (CONSTRUCTOR_ERROR.equals(problem.getID())) {
            String className = ClassUtil.removeGenericType(arguments[0]);
            if (javaCodeFileMap.containsKey(className)) {
                File file = javaCodeFileMap.get(className);
                if (!validateConstructorProblem(file)) {
                    return false;
                }
            } else {
                Pair<String, String> classPair = isInnerClass(className);
                if (classPair != null) {
                    // if is inner class
                    File tempFile = writeInnerClassToTempFile(classPair);
                    if (!validateConstructorProblem(tempFile)) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    private boolean validateConstructorProblem(File sourceCodeFile) {
        List<String> annotations = JDTUtil.getClassAnnotations(sourceCodeFile);
        for (String constructorAnnotation : CONSTRUCTOR_ANNOTATION_SET) {
            if (annotations.contains(constructorAnnotation)) {
                return false;
            }
        }
        return true;
    }
}
